{% block javascript_grafic_editor %}
    <script src="{{ asset('bundles/app/js/go-debug.js') }}"></script>
    <script id="code">
            function init() {
                var $ = go.GraphObject.make;  // for conciseness in defining templates

                myDiagram =
                        $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
                                {
                                    initialContentAlignment: go.Spot.Center,
                                    allowDrop: true,  // must be true to accept drops from the Palette
                                    "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
                                    "LinkRelinked": showLinkLabel,
                                    "animationManager.duration": 800, // slightly longer than default (600ms) animation
                                    "undoManager.isEnabled": true  // enable undo & redo
                                    //validCycle: go.Diagram.CycleDestinationTree
                                });

                // when the document is modified, add a "*" to the title and enable the "Save" button
                myDiagram.addDiagramListener("Modified", function(e) {
                    var button = document.getElementById("SaveButton");
                    if (button) button.disabled = !myDiagram.isModified;
                    var idx = document.title.indexOf("*");
                    if (myDiagram.isModified) {
                        if (idx < 0) document.title += "*";
                    } else {
                        if (idx >= 0) document.title = document.title.substr(0, idx);
                    }
                });

                // helper definitions for node templates

                function nodeStyle() {
                    return [
                        // The Node.location comes from the "loc" property of the node data,
                        // converted by the Point.parse static method.
                        // If the Node.location is changed, it updates the "loc" property of the node data,
                        // converting back using the Point.stringify static method.
                        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                        {
                            // the Node.location is at the center of each node
                            locationSpot: go.Spot.Center,
                            //isShadowed: true,
                            //shadowColor: "#888",
                            // handle mouse enter/leave events to show/hide the ports
                            mouseEnter: function (e, obj) { showPorts(obj.part, true); },
                            mouseLeave: function (e, obj) { showPorts(obj.part, false); }
                        }
                    ];
                }

                // Define a function for creating a "port" that is normally transparent.
                // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
                // and where the port is positioned on the node, and the boolean "output" and "input" arguments
                // control whether the user can draw links from or to the port.
                function makePort(name, spot, output, input) {
                    // the port is basically just a small circle that has a white stroke when it is made visible
                    return $(go.Shape, "Circle",
                            {
                                fill: "transparent",
                                stroke: null,  // this is changed to "white" in the showPorts function
                                desiredSize: new go.Size(8, 8),
                                alignment: spot, alignmentFocus: spot,  // align the port on the main Shape
                                portId: name,  // declare this object to be a "port"
                                fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
                                fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
                                cursor: "pointer"  // show a different cursor to indicate potential link point
                            });
                }


                // define the Node templates for regular nodes

                var lightText = '#000000';
                function virtualMachineInfoTextConverter(info) {
                    var str = "";
                    if (info.host_num_cpus     ) str += "host.num_cpus: " +    info.host_num_cpus;
                    if (info.host_disk_size    ) str += "\n host.disk_size: " +    info.host_disk_size;
                    if (info.host_mem_size     ) str += "\n host.mem_size: " +    info.host_mem_size;
                    if (info.os_architecture   ) str += "\n os.architecture: " +    info.os_architecture;
                    if (info.os_type           ) str += "\n os.type: " +    info.os_type;
                    if (info.os_distribution   ) str += "\n os.distribution: " +    info.os_distribution;
                    if (info.os_version        ) str += "\n os.version: " +    info.os_version;
                    return str;
                }

                function networkInfoTextConverter(info) {
                    var str = "";
                   /* for(i in info){
                        if ($i) str += $i +" : " +  $i[0];
                    };*/

                    if (info.ip_version     ) str += " ip_version: " +    info.ip_version;
                    if (info.cidr    ) str += " cidr: " +    info.cidr;
                    if (info.start_ip     ) str += " start_ip: " +    info.start_ip;
                    if (info.end_ip   ) str += " os.end_ip: " +    info.end_ip;
                    return str;
                }
                function portInfoTextConverter(info) {
                    var str = "";
                    if (info.binding     ) str += " binding: " +    info.binding;
                    if (info.link    ) str += " link: " +    info.link;
                    return str;
                }

                myDiagram.nodeTemplateMap.add("virtual_machine",  // the default category
                        $(go.Node, "Spot", nodeStyle(),
                                // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                                $(go.Panel, "Table",
                                        { margin: 6, maxSize: new go.Size(200, NaN) },
                                        // the two TextBlocks in column 0 both stretch in width
                                        // but align on the left side
                                        $(go.RowColumnDefinition,
                                                {
                                                    column: 0,
                                                    stretch: go.GraphObject.Horizontal,
                                                    alignment: go.Spot.Left
                                                }),

                                        $(go.Shape, "Rectangle",
                                                { fill: "#99ffb3", stroke: null },
                                                new go.Binding("figure", "figure")),

                                        $(go.TextBlock,
                                                {
                                                    row: 0, column: 0,
                                                    maxSize: new go.Size(160, NaN), margin: 2,
                                                    font: '500 16px Roboto, sans-serif',
                                                    alignment: go.Spot.Top,
                                                    stroke: lightText,
                                                    wrap: go.TextBlock.WrapFit,
                                                    maxSize: new go.Size(160, NaN),
                                                    margin: 8,
                                                    editable: true

                                                    /* font: "bold 11pt Helvetica, Arial, sans-serif",




                                                    */
                                                },

                                                new go.Binding("text").makeTwoWay()
                                        ),

                                        $(go.TextBlock,
                                                {
                                                    row: 1, column: 0, columnSpan: 2,
                                                    font: "12px Roboto, sans-serif",
                                                    stroke: lightText,
                                                    margin: 8,
                                                    maxSize: new go.Size(160, NaN),
                                                    wrap: go.TextBlock.WrapFit,
                                                    //fill: "#99ffb3",
                                                    editable: true
                                                    /*font: "bold 8pt Helvetica, Arial, sans-serif",

                                                    */
                                                },

                                                new go.Binding("text", "", virtualMachineInfoTextConverter).makeTwoWay()
                                        )


                                ),
                                // four named ports, one on each side:
                                makePort("T", go.Spot.Top, false, true),
                                makePort("L", go.Spot.Left, true, true),
                                makePort("R", go.Spot.Right, true, true),
                                makePort("B", go.Spot.Bottom, true, false)
                        ));

                myDiagram.nodeTemplateMap.add("network",  // the default category
                        $(go.Node, "Spot", nodeStyle(),
                                // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                                $(go.Panel, "Auto",
                                        $(go.Shape, "Rectangle",
                                                { fill: "#79C900", stroke: null },
                                                new go.Binding("figure", "figure")),
                                        $(go.TextBlock,
                                                {
                                                    font: "bold 11pt Helvetica, Arial, sans-serif",
                                                    stroke: lightText,
                                                    margin: 8,
                                                    maxSize: new go.Size(160, NaN),
                                                    wrap: go.TextBlock.WrapFit,
                                                    editable: true
                                                },

                                                new go.Binding("text", "", networkInfoTextConverter).makeTwoWay())
                                ),
                                // four named ports, one on each side:
                                makePort("T", go.Spot.Top, false, true),
                                makePort("L", go.Spot.Left, true, true),
                                makePort("R", go.Spot.Right, true, true),
                                makePort("B", go.Spot.Bottom, true, false)
                        ));
                myDiagram.nodeTemplateMap.add("port",  // the default category
                        $(go.Node, "Spot", nodeStyle(),
                                // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                                $(go.Panel, "Auto",
                                        $(go.Shape, "Rectangle",
                                                { fill: "#ffff99", stroke: null },
                                                new go.Binding("figure", "figure")),
                                        $(go.TextBlock,
                                                {
                                                    font: "bold 11pt Helvetica, Arial, sans-serif",
                                                    stroke: lightText,
                                                    margin: 8,
                                                    maxSize: new go.Size(160, NaN),
                                                    wrap: go.TextBlock.WrapFit,
                                                    editable: true
                                                },

                                                new go.Binding("text", "", portInfoTextConverter).makeTwoWay())
                                ),
                                // four named ports, one on each side:
                                makePort("T", go.Spot.Top, false, true),
                                makePort("L", go.Spot.Left, true, true),
                                makePort("R", go.Spot.Right, true, true),
                                makePort("B", go.Spot.Bottom, true, false)
                        ));
                myDiagram.nodeTemplateMap.add("role",  // the default category
                        $(go.Node, "Spot", nodeStyle(),
                                // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                                $(go.Panel, "Auto",
                                        $(go.Shape, "Rectangle",
                                                { fill: "#b3ff99", stroke: null },
                                                new go.Binding("figure", "figure")),
                                        $(go.TextBlock,
                                                {
                                                    font: "bold 11pt Helvetica, Arial, sans-serif",
                                                    stroke: lightText,
                                                    margin: 8,
                                                    maxSize: new go.Size(160, NaN),
                                                    wrap: go.TextBlock.WrapFit,
                                                    editable: true
                                                },
                                                new go.Binding("text").makeTwoWay())
                                ),
                                // four named ports, one on each side:
                                makePort("T", go.Spot.Top, false, true),
                                makePort("L", go.Spot.Left, true, true),
                                makePort("R", go.Spot.Right, true, true),
                                makePort("B", go.Spot.Bottom, true, false)
                        ));
                /*            myDiagram.nodeTemplateMap.add("network",
                 $(go.Node, "Spot", nodeStyle(),
                 $(go.Panel, "Auto",
                 $(go.Shape, "Circle",
                 { minSize: new go.Size(40, 40), fill: "#79C900", stroke: null }),
                 $(go.TextBlock, "Start",
                 { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                 new go.Binding("text"))
                 ),
                 // three named ports, one on each side except the top, all output only:
                 makePort("L", go.Spot.Left, true, false),
                 makePort("R", go.Spot.Right, true, false),
                 makePort("B", go.Spot.Bottom, true, false)
                 ));

                 myDiagram.nodeTemplateMap.add("End",
                 $(go.Node, "Spot", nodeStyle(),
                 $(go.Panel, "Auto",
                 $(go.Shape, "Circle",
                 { minSize: new go.Size(40, 40), fill: "#DC3C00", stroke: null }),
                 $(go.TextBlock, "End",
                 { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                 new go.Binding("text"))
                 ),
                 // three named ports, one on each side except the bottom, all input only:
                 makePort("T", go.Spot.Top, false, true),
                 makePort("L", go.Spot.Left, false, true),
                 makePort("R", go.Spot.Right, false, true)
                 ));
                 */
                myDiagram.nodeTemplateMap.add("Comment",
                        $(go.Node, "Auto", nodeStyle(),
                                $(go.Shape, "File",
                                        { fill: "#EFFAB4", stroke: null }),
                                $(go.TextBlock,
                                        {
                                            margin: 5,
                                            maxSize: new go.Size(200, NaN),
                                            wrap: go.TextBlock.WrapFit,
                                            textAlign: "center",
                                            editable: true,
                                            font: "bold 12pt Helvetica, Arial, sans-serif",
                                            stroke: '#454545'
                                        },
                                        new go.Binding("text").makeTwoWay())
                                // no ports, because no links are allowed to connect with a comment
                        ));


                // replace the default Link template in the linkTemplateMap
                myDiagram.linkTemplate =
                        $(go.Link,  // the whole link panel
                                {
                                    routing: go.Link.AvoidsNodes,
                                    curve: go.Link.JumpOver,
                                    corner: 5, toShortLength: 4,
                                    relinkableFrom: true,
                                    relinkableTo: true,
                                    reshapable: true,
                                    resegmentable: true,
                                    // mouse-overs subtly highlight links:
                                    mouseEnter: function(e, link) { link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)"; },
                                    mouseLeave: function(e, link) { link.findObject("HIGHLIGHT").stroke = "transparent"; }
                                },
                                new go.Binding("points").makeTwoWay(),
                                $(go.Shape,  // the highlight shape, normally transparent
                                        { isPanelMain: true, strokeWidth: 8, stroke: "transparent", name: "HIGHLIGHT" }),
                                $(go.Shape,  // the link path shape
                                        { isPanelMain: true, stroke: "gray", strokeWidth: 2 }),
                                $(go.Shape,  // the arrowhead
                                        { toArrow: "standard", stroke: null, fill: "gray"}),
                                $(go.Panel, "Auto",  // the link label, normally not visible
                                        { visible: false, name: "LABEL", segmentIndex: 2, segmentFraction: 0.5},
                                        new go.Binding("visible", "visible").makeTwoWay(),
                                        $(go.Shape, "RoundedRectangle",  // the label shape
                                                { fill: "#F8F8F8", stroke: null }),
                                        $(go.TextBlock, "Yes",  // the label
                                                {
                                                    textAlign: "center",
                                                    font: "10pt helvetica, arial, sans-serif",
                                                    stroke: "#333333",
                                                    editable: true
                                                },
                                                new go.Binding("text").makeTwoWay())
                                )
                        );

                // Make link labels visible if coming out of a "conditional" node.
                // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
                function showLinkLabel(e) {
                    var label = e.subject.findObject("LABEL");
                    if (label !== null) label.visible = (e.subject.fromNode.data.figure === "Diamond");
                }

                // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
                myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
                myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;

                load();  // load an initial diagram from some JSON text

                // initialize the Palette that is on the left side of the page
                myPalette =
                        $(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
                                {
                                    "animationManager.duration": 800, // slightly longer than default (600ms) animation
                                    nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
                                    model: new go.GraphLinksModel([  // specify the contents of the Palette


                                        {% set data = '' %}
                                        {% for e in networkFunctions %}
                                            {%  set data = data ~('\n{'
                                            ~'category: "'~e.role.name~'", '
                                            ~'text: "'~e.name~'", ')%}
                                            {% set attr = '' %}
                                            {% for a in e.attributes %}

                                                {%  set attr = attr ~(
                                                    ''~a['name']~': "'~a['value']~'" ,'
                                                )%}
                                            {% endfor %}
                                            {% set data = data ~ (attr|slice(0, (attr|length)-1)) ~ ('},') %}
                                        {% endfor %}
                                        {{ (data|slice(0, (data|length)-1)) | raw}}
                                        /*
                                         { category: "Start", text: "Start" },
                                         { text: "FW" },
                                         { text: "Step" },
                                         { text: "???", figure: "Diamond" },
                                         { category: "End", text: "End" },
                                         { category: "Comment", text: "Comment" }
                                         */
                                    ])
                                });

            }

    // Make all ports on a node visible when the mouse is over the node
    function showPorts(node, show) {
        var diagram = node.diagram;
        if (!diagram || diagram.isReadOnly || !diagram.allowLink) return;
        node.ports.each(function(port) {
            port.stroke = (show ? "white" : null);
        });
    }


    // Show the diagram's model in JSON format that the user may edit
    function save() {
        document.getElementById("networkconfig_config_value").value = myDiagram.model.toJson();
        myDiagram.isModified = false;
    }
    function load() {
        myDiagram.model = go.Model.fromJson(document.getElementById("networkconfig_config_value").value);
    }

    // add an SVG rendering of the diagram at the end of this page
    function makeSVG() {
        var svg = myDiagram.makeSvg({
            scale: 0.5
        });
        svg.style.border = "1px solid black";
        obj = document.getElementById("SVGArea");
        obj.appendChild(svg);
        if (obj.children.length > 0) {
            obj.replaceChild(svg, obj.children[0]);
        }
    }
</script>
{% endblock %}